knitr::opts_chunk$set(echo = TRUE)
a <- 2
a <- 2
3 -> b
a <- 2
3 -> b
my_108_total_credits <- 15
_108_total_credits <- 15
我的年紀 <- 20
my_age <- 我的年紀
我的年紀 <- 20
my_age <- 我的年紀
'我的年紀' <- 20
my_age <- '我的年紀'
num1 <- 5
vNum1 <- c(2,5)
vNum2 <- c(2, num1)
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
num1<-5 # 非整數
num2<-5L # 整數
num1Vector<-c(5,6,7)
num2Vector<-c(5L,6L,7L)
num1Vector<-c(5,6,7)
num2Vector<-c(5L,6L,7L)
num1Vector<-c(5,6,7)
num2Vector<-c(5L,6L,7L)
char1<-"你好"
char2<-'你好'
char1Vector<-c("你好","How are you?")
dialogue <- c('小明說："明天不用上課。"',
'小花說："真的嗎？"')
cat(dialogue, sep="\n")
library(httr)
library(dplyr)
GET("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits") %>%
content() %>%
View()
logi1 <- c(T,TRUE,F,FALSE,FALSE)
knitr::opts_chunk$set(echo = TRUE)
list1[[1]][-3] -> list1[[1]]
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
),
list(
name="Mary",
birthday=ymd("1998-08-24"),
status=c(height=163, weight=45),
age=21,
bloodType="AB"
)
)
str(list1)
list1[[1]][-3] -> list1[[1]]
str(list1)
str(list1)
list1[[2]][c(1,2)] <- NULL
str(list1)
list1[[2]][c(1,2)] <- NULL
str(list1)
list1[[2]][c(1,2)] <- NULL
str(list1)
library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC?$format=json", simplifyDataFrame = F) -> newTaipeiYouBike
knitr::opts_chunk$set(echo = TRUE)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a ** b
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)
sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)
## 對向量5，向量7進行recycle:
c(5,5,5)*c(1,3,4)+c(7,7,7)
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
paste0(
c("我叫"), c("小明","小美")
)
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
View(example)
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$height
c(175, 166, 170, 160) >= 170
example$name[pick_above170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85人數
table(transcript100to103$學屆[pick_above85])
example$birthday
class(example$birthday)
typeof(example$birthday)
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
print(example[c("name","allowance")])
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
knitr::opts_chunk$set(echo = TRUE)
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T)
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T)
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
# 先將類別資料設定成可排序類別資料
list_victimAges_female$年齡層 <-
ordered(list_victimAges_female$年齡層)
pick_above30 <-
list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
print(example[c("name","bloodType")])
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
str(transcript100to103)
print(example[c("name","residence")])
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
print(example[c("name","residence")])
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(list_victimAges_female$數目)
total_na <- sum(pick_na)
print(total_na)
print(example[c("name","hobby")])
pick_loveFood <- example$hobby == "美食"
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
pick_loveFood <- example$hobby == "美食"
pick_loveFood
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
install.packages("str_detect")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick_pneumonia <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick_pneumonia]
